["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$require",["^ "],"~$WebSocket",["^ "],"~$Object",["^ "]],"~:use-macros",["^ ","~$wrap-format","~$chord.format","~$go","~$cljs.core.async.macros","~$write-to-ws!","~$chord.channels","~$alt!","^:","~$go-loop","^:","~$bidi-ch","^<","~$read-from-ws!","^<"],"~:excludes",["~#set",[]],"~:name","~$chord.client","~:imports",null,"~:requires",["^ ","~$a","~$cljs.core.async","^G","^G","^<","^<","^8","^8"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^7","^8","~$<!","^G","~$close!","^G","~$chan","^G","^;","^<","^?","^<","~$>!","^G","~$put!","^G","^@","^<"],"~:defs",["^ ","~$close-event->maybe-error",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/mnt/c/workspace/wocket/example-project/resources/public/js/compiled/out/chord/client.cljs","~:line",7,"~:column",7,"~:end-line",7,"~:end-column",31,"~:arglists",["~#list",["~$quote",["^Y",[["~$ev"]]]]]],"^C","~$chord.client/close-event->maybe-error","^S","resources/public/js/compiled/out/chord/client.cljs","^W",31,"~:method-params",["^Y",[["^["]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^U",1,"~:variadic?",false,"^T",7,"~:ret-tag",["^B",["~$cljs.core/IMap","~$clj-nil"]],"^V",7,"~:max-fixed-arity",1,"~:fn-var",true,"^X",["^Y",["^Z",["^Y",[["^["]]]]]],"~$create-ws",["^ ","^Q",null,"^R",["^ ","^S","/mnt/c/workspace/wocket/example-project/resources/public/js/compiled/out/chord/client.cljs","^T",12,"^U",8,"^V",12,"^W",17,"~:private",true,"^X",["^Y",["^Z",["^Y",[["~$url","~$opts"]]]]]],"^1;",true,"^C","~$chord.client/create-ws","^S","resources/public/js/compiled/out/chord/client.cljs","^W",17,"^11",["^Y",[["^1<","^1="]]],"^12",null,"^13",["^Y",[null,null]],"^U",1,"^14",false,"^T",12,"^15",["^B",["~$ws","~$js/WebSocket"]],"^V",12,"^18",2,"^19",true,"^X",["^Y",["^Z",["^Y",[["^1<","^1="]]]]]],"~$ws-ch",["^ ","^Q",null,"^R",["^ ","^S","/mnt/c/workspace/wocket/example-project/resources/public/js/compiled/out/chord/client.cljs","^T",29,"^U",7,"^V",29,"^W",12,"^X",["^Y",["^Z",["^Y",[["~$ws-url","~$&",[["^ ","~:keys",["~$read-ch","~$write-ch","~$format","~$ws-opts"],"~:as","^1="]]]]]]],"~:doc","Creates websockets connection and returns a 2-sided channel when the websocket is opened.\n   Arguments:\n    ws-url           - (required) link to websocket service\n    opts             - (optional) map to configure reading/writing channels\n      :read-ch       - (optional) (possibly buffered) channel to use for reading the websocket\n      :write-ch      - (optional) (possibly buffered) channel to use for writing to the websocket\n      :format        - (optional) data format to use on the channel, (at the moment)\n                                  either :edn (default), :json, :json-kw or :str.\n      :ws-opts       - (optional) Other options to be passed to the websocket constructor (NodeJS only)\n                                  see https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketaddress-protocols-options\n\n   Usage:\n    (:require [cljs.core.async :as a])\n\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\"))\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\" {:read-ch (a/chan (a/sliding-buffer 10))}))\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\" {:read-ch (a/chan (a/sliding-buffer 10))\n                                          :write-ch (a/chan (a/dropping-buffer 10))}))","~:top-fn",["^ ","^14",true,"~:fixed-arity",1,"^18",1,"^11",[["^Y",["^1B",[["^ ","^1C",["^1D","^1E","^1F","^1G"],"^1H","^1="]]]]],"^X",["^Y",[["^1B","~$&",[["^ ","^1C",["^1D","^1E","^1F","^1G"],"^1H","^1="]]]]],"^13",["^Y",[null]]]],"^C","~$chord.client/ws-ch","^S","resources/public/js/compiled/out/chord/client.cljs","^W",12,"^1J",["^ ","^14",true,"^1K",1,"^18",1,"^11",[["^Y",["^1B",[["^ ","^1C",["^1D","^1E","^1F","^1G"],"^1H","^1="]]]]],"^X",["^Y",[["^1B","~$&",[["^ ","^1C",["^1D","^1E","^1F","^1G"],"^1H","^1="]]]]],"^13",["^Y",[null]]],"^11",[["^Y",["^1B",[["^ ","^1C",["^1D","^1E","^1F","^1G"],"^1H","^1="]]]]],"^12",null,"^1K",1,"^13",["^Y",[null]],"^U",1,"^14",true,"~:methods",[["^ ","^1K",1,"^14",true,"~:tag","~$any"]],"^T",29,"^15","^1O","^V",29,"^18",1,"^19",true,"^X",["^Y",[["^1B","~$&",[["^ ","^1C",["^1D","^1E","^1F","^1G"],"^1H","^1="]]]]],"^1I","Creates websockets connection and returns a 2-sided channel when the websocket is opened.\n   Arguments:\n    ws-url           - (required) link to websocket service\n    opts             - (optional) map to configure reading/writing channels\n      :read-ch       - (optional) (possibly buffered) channel to use for reading the websocket\n      :write-ch      - (optional) (possibly buffered) channel to use for writing to the websocket\n      :format        - (optional) data format to use on the channel, (at the moment)\n                                  either :edn (default), :json, :json-kw or :str.\n      :ws-opts       - (optional) Other options to be passed to the websocket constructor (NodeJS only)\n                                  see https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketaddress-protocols-options\n\n   Usage:\n    (:require [cljs.core.async :as a])\n\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\"))\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\" {:read-ch (a/chan (a/sliding-buffer 10))}))\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\" {:read-ch (a/chan (a/sliding-buffer 10))\n                                          :write-ch (a/chan (a/dropping-buffer 10))}))"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^:","^:","~$a","^G","^G","^G"],"~:cljs.analyzer/constants",["^ ","~:seen",["^B",["~:write-ch","~:format","~:else","~:on-close","~:default","~:ws-opts","~:recur","~:ws-channel","~:reason","~:read-ch","~:code","~:error"]],"~:order",["^20","^22","^1V","^21","^1T","^1U","^1Y","^1W","^1Z","^1[","^1X","^23"]],"^1I",null]